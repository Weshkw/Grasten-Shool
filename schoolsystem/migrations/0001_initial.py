# Generated by Django 4.2.4 on 2023-08-27 15:40

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Bill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_of_the_bill', models.CharField(default='Electricity Bill', max_length=250)),
                ('amount_payed_for_the_bill', models.DecimalField(decimal_places=2, max_digits=10)),
                ('date_payed', models.DateTimeField(default=django.utils.timezone.now)),
            ],
        ),
        migrations.CreateModel(
            name='FeesStructure',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fees_structure_description', models.TextField()),
                ('fees_structure', models.FileField(upload_to='fees_structure/')),
                ('upload_date', models.DateField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='landingPageImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('landing_page_picture_category', models.CharField(choices=[('ACADEMICS', 'ACADEMICS'), ('COCURRICULAR', 'COCURRICULAR'), ('ICT', 'ICT')], max_length=100)),
                ('landing_page_picture', models.ImageField(upload_to='landing_page_pictures/')),
                ('date', models.DateField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='LogoImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('logo', models.ImageField(upload_to='')),
            ],
        ),
        migrations.CreateModel(
            name='New',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('content', models.TextField()),
                ('image', models.ImageField(blank=True, upload_to='news_images/')),
                ('date_uploaded', models.DateField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='NonTeachingStaff',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(max_length=100)),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other')], max_length=1)),
                ('phone_number', models.CharField(max_length=20)),
                ('id_number', models.CharField(max_length=255, unique=True)),
                ('position', models.CharField(max_length=100)),
                ('department', models.CharField(max_length=100)),
                ('curriculum_vitae', models.FileField(blank=True, upload_to='curriculum vitae/')),
                ('employment_duration', models.CharField(blank=True, max_length=200)),
                ('employment_date', models.DateField()),
                ('date_created', models.DateField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(max_length=255)),
                ('date_of_birth', models.DateField()),
                ('gender', models.CharField(choices=[('male', 'MALE'), ('female', 'FEMALE')], max_length=10)),
                ('nationality', models.CharField(choices=[('kenyan', 'KENYAN'), ('others', 'OTHERS')], max_length=100)),
                ('student_admission_number', models.CharField(max_length=20, unique=True)),
                ('grade_level', models.CharField(choices=[('PP1', 'PP1'), ('PP2', 'PP2'), ('grade1', 'GRADE1'), ('grade2', 'GRADE2'), ('grade3', 'GRADE3'), ('grade4', 'GRADE4'), ('grade5', 'GRADE5'), ('grade6', 'GRADE6'), ('grade7', 'GRADE7'), ('grade8', 'GRADE8'), ('grade9', 'GRADE9')], max_length=100)),
                ('enrollment_date', models.DateField(auto_now_add=True)),
                ('clubs_organizations', models.TextField(blank=True, null=True)),
                ('sports_participation', models.TextField(blank=True, null=True)),
                ('awards', models.TextField(blank=True, null=True)),
                ('emergency_contact_name', models.CharField(max_length=255)),
                ('emergency_contact_relationship', models.CharField(choices=[('parent or guardian', 'PARENT OR GUARDIAN'), ('uncle', 'UNCLE'), ('aunt', 'AUNT'), ('grandparent', 'GRANDPARENT'), ('cousin', 'COUSIN'), ('trusted family friend', 'TRUSTED FAMILY FRIEND')], max_length=100)),
                ('emergency_contact_phone', models.CharField(max_length=20)),
                ('parent_guardian_name', models.CharField(max_length=255)),
                ('parent_guardian_phone', models.CharField(max_length=20)),
                ('date_created', models.DateField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='TeachingStaff',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tsc_number', models.CharField(max_length=200, unique=True)),
                ('id_number', models.CharField(max_length=255, unique=True)),
                ('full_name', models.CharField(max_length=100)),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other')], max_length=1)),
                ('phone_number', models.CharField(max_length=20)),
                ('curriculum_vitae', models.FileField(upload_to='curriculum vitae/')),
                ('position', models.TextField()),
                ('awards', models.TextField(blank=True, null=True)),
                ('professional_organizations', models.CharField(max_length=200)),
                ('employment_date', models.DateField()),
                ('date_created', models.DateField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Term_or_semester',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('term_or_semester_name', models.CharField(max_length=50)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('set_totalfees_payable', models.DecimalField(decimal_places=2, max_digits=10)),
            ],
        ),
        migrations.CreateModel(
            name='StudentResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.IntegerField()),
                ('student_grade_level', models.CharField(blank=True, choices=[('PP1', 'PP1'), ('PP2', 'PP2'), ('grade1', 'GRADE1'), ('grade2', 'GRADE2'), ('grade3', 'GRADE3'), ('grade4', 'GRADE4'), ('grade5', 'GRADE5'), ('grade6', 'GRADE6'), ('grade7', 'GRADE7'), ('grade8', 'GRADE8'), ('grade9', 'GRADE9')], max_length=200)),
                ('term_or_semester_name', models.CharField(choices=[('TERM 1', 'TERM 1'), ('TERM 2', 'TERM 2'), ('TERM 3', 'TERM 3')], max_length=200)),
                ('examination', models.CharField(choices=[('AGRICULTURE', 'Agriculture'), ('BRAILLE LITERACY', 'Braille Literacy Activities'), ('BUSINESS STUDIES', 'Business Studies'), ('COMPUTER SCIENCE', 'Computer Science'), ('CREATIVE ARTS', 'Creative Arts'), ('ENGLISH LANGUAGE_ACTIVITIES', 'English Language Activities'), ('ENVIRONMENTAL ACTIVITIES', 'Environmental Activities'), ('FOREIGN LANGUAGES', 'Foreign Languages (German, French, Mandarin, or Arabic)'), ('HEALTH_EDUCATION', 'Health Education'), ('HOME SCIENCE', 'Home Science'), ('HYGIENE AND_NUTRITION_ACTIVITIES', 'Hygiene and Nutrition Activities'), ('INDIGENOUS_LANGUAGES', 'Indigenous Languages'), ('INTEGRATED SCIENCE', 'Integrated Science'), ('KENYA SIGN LANGUAGE', 'Kenya Sign Language'), ('KISWAHILI LANGUAGE_ACTIVITIES', 'Kiswahili Language Activities'), ('LIFE_SKILLS', 'Life Skills'), ('MATHEMATICAL ACTIVITIES', 'Mathematical Activities'), ('MATHEMATICS', 'Mathematics'), ('MOVEMENT AND CREATIVE_ACTIVITIES', 'Movement and Creative Activities'), ('PERFORMING ARTS', 'Performing Arts'), ('PHYSICAL AND_HEALTH_EDUCATION', 'Physical and Health Education'), ('PRE_BRAILLE ACTIVITIES', 'Pre Braille Activities'), ('PRE_TECHNICAL AND PRE_CAREER_EDUCATION', 'Pre-Technical and Pre-Career Education'), ('RELIGIOUS EDUCATION ACTIVITIES', 'Religious Education Activities'), ('RELIGIOUS EDUCATION', 'Religious Education (CRE)'), ('RELIGIOUS EDUCATION', 'Religious Education (IRE)'), ('RELIGIOUS EDUCATION', 'Religious Education (HRE)'), ('SCIENCE AND TECHNOLOGY', 'Science and Technology'), ('SOCIAL STUDIES', 'Social Studies'), ('SPORTS AND PHYSICAL EDUCATION', 'Sports and Physical Education'), ('VISUAL ARTS', 'Visual Arts')], max_length=200)),
                ('score', models.DecimalField(decimal_places=2, max_digits=5)),
                ('teacher_comments', models.CharField(blank=True, max_length=20)),
                ('date_uploaded', models.DateField(auto_now_add=True)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='schoolsystem.student')),
            ],
        ),
        migrations.AddField(
            model_name='student',
            name='subjects',
            field=models.ManyToManyField(related_name='students', to='schoolsystem.subject'),
        ),
        migrations.CreateModel(
            name='StaffGovernmentDeduction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('staff_type', models.CharField(choices=[('TS', 'Teaching Staff'), ('NTS', 'Non-Teaching Staff')], max_length=3)),
                ('deducted_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('name_of_deduction', models.CharField(default='NHIF', max_length=100)),
                ('date_deducted', models.DateField(auto_now_add=True)),
                ('non_teaching_staff_name', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='schoolsystem.nonteachingstaff')),
                ('staff_name', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='schoolsystem.teachingstaff')),
            ],
        ),
        migrations.CreateModel(
            name='FeePayment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount_paid', models.DecimalField(decimal_places=2, max_digits=10)),
                ('payment_date', models.DateField()),
                ('payment_method', models.CharField(choices=[('Cash', 'Cash'), ('Bank deposit', 'Bank deposit'), ('Bank Transfer', 'Bank Transfer'), ('M-pesa Payment', 'M-pesa Payment')], max_length=20)),
                ('transaction_id', models.CharField(blank=True, max_length=50, null=True)),
                ('notes', models.TextField(blank=True)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='schoolsystem.student')),
                ('term_or_semester_name', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='schoolsystem.term_or_semester')),
            ],
        ),
        migrations.CreateModel(
            name='EducationalResource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('category', models.CharField(choices=[('Past Examinations', 'Past Examinations'), ('ebooks', 'Ebooks and Study Guides'), ('Educational pictures', 'Educational pictures'), ('Educational Videos', 'Educational Videos'), ('Educational links', 'Educational links'), ('General Resources', 'General Resources')], max_length=20)),
                ('appropriate_grade', models.CharField(choices=[('PP1', 'PP1'), ('PP2', 'PP2'), ('grade1', 'GRADE1'), ('grade2', 'GRADE2'), ('grade3', 'GRADE3'), ('grade4', 'GRADE4'), ('grade5', 'GRADE5'), ('grade6', 'GRADE6'), ('grade7', 'GRADE7'), ('grade8', 'GRADE8'), ('grade9', 'GRADE9'), ('All students', 'All students')], max_length=20)),
                ('file', models.FileField(blank=True, null=True, upload_to='EducationalResources/')),
                ('link', models.URLField(blank=True, null=True)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='schoolsystem.subject')),
            ],
        ),
        migrations.CreateModel(
            name='AnyOtherPayment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('payment_for', models.CharField(max_length=255)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=8)),
                ('payment_date', models.DateTimeField(auto_now_add=True)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='schoolsystem.student')),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id_number', models.CharField(max_length=50, unique=True)),
                ('first_name', models.CharField(max_length=50)),
                ('second_name', models.CharField(max_length=50)),
                ('surname', models.CharField(max_length=50)),
                ('phone_number', models.CharField(max_length=15)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='customuser_set', related_query_name='customuser', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='customuser_set', related_query_name='customuser', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
    ]
